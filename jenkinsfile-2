pipeline {
    agent any

    environment {
        IMAGE_NAME = "Kathir37"
        REGISTRY = "docker.io"
        DOCKER_CREDENTIALS_ID = "Docker"
        GITHUB_CREDENTIALS_ID = "Git"
    }

    stages {
        stage('Set Environment Variables') {
            steps {
                script {
                    env.APP_DIR = env.WORKSPACE  // Correct way to set APP_DIR
                    echo "APP_DIR is set to: ${env.APP_DIR}"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git credentialsId: env.GITHUB_CREDENTIALS_ID, url: 'https://github.com/Kathir37/jenkins.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "cd ${env.APP_DIR} && docker build -t ${env.IMAGE_NAME}:latest ."
                }
            }
        }

        stage('Login to Docker Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin ${env.REGISTRY}'
                    }
                }
            }
        }

        stage('Push Image to Docker Registry') {
            steps {
                script {
                    sh "docker push ${env.IMAGE_NAME}:latest"
                }
            }
        }

        stage('Deploy using Docker Compose') {
            steps {
                script {
                    sh '''
                        set -e  # Stop execution if any command fails
                        cd ${APP_DIR}
                        docker-compose down
                        docker-compose up -d
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs for errors.'
        }
    }
}
